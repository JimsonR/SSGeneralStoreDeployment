trigger:
- main
# Stage 1
# Build docker image 
# Publish the K8S Files

resources:
- repo: self

variables:
  tag:  '$(Build.BuildId)'
  backendImage: 'jimsonrats/ssgenerals-backend:$(tag)'
  frontendImage: 'jimsonrats/ssgenerals-frontend:$(tag)'
  mysqlImage: 'mysql:8.0'
  k8sNamespace: 'default'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
      # name: Test Agent
    steps:
      - task: Docker@2
        displayName: 'Build Backend Image'
        inputs:
          containerRegistry: 'jimson-docker-hub'
          repository: 'jimsonrats/ssgenerals-backend'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile.backend'
          tags: '$(tag)'
      # - task: Docker@2
      #   displayName: 'Build Frontend Image'
      #   inputs:
      #     containerRegistry: 'jimson-docker-hub'
      #     repository: 'jimsonrats/ssgenerals-frontend'
      #     command: 'buildAndPush'
      #     Dockerfile: '**/Dockerfile.frontend'
      #     tags: '$(tag)'
      - task: CopyFiles@2
        displayName: 'Copy Kubernetes Manifests'
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)/configuration/kubernetes'
          Contents: '**/*.yaml'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/manifests'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Manifests'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'manifests'
          publishLocation: 'Container'  # Stage 1 is done 
          
- stage: Deploy
  displayName: Deploy image
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-latest
      # name: Test Agent
    steps:  
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Manifests'
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        itemPattern: '**/*.yaml'
        targetPath: '$(System.ArtifactsDirectory)/manifests'

    # - task: KubernetesManifest@1
    #   displayName: 'Deploy MySQL'
    #   inputs:
    #     action: 'deploy'
    #     connectionType: 'kubernetesServiceConnection'
    #     kubernetesServiceConnection: 'azure-kubernetes-ssgenerals-connenction'
    #     namespace: '$(k8sNamespace)'
    #     manifests: '$(System.ArtifactsDirectory)/manifests/mysql-*.yaml'
    #     containers: '$(mysqlImage)'
    #     arguments: '--timeout=300s'
        
        # Add MySQL readiness check
    # - task: Bash@3
    #   displayName: 'Wait for MySQL'
    #   timeoutInMinutes: 5
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       echo "Waiting for MySQL to be ready..."
    #       kubectl wait --for=condition=Ready pod -l app=mysql --timeout=300s
    #       kubectl exec $(kubectl get pod -l app=mysql -o name) -- \
    #         mysqladmin ping -uroot -p1234 || exit 1
    - task: KubernetesManifest@1
      displayName: 'Deploy Backend'
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: 'azure-kubernetes-ssgenerals-connenction'
        namespace: '$(k8sNamespace)'
        manifests: '$(System.ArtifactsDirectory)/manifests/backend-*.yaml'
        containers: '$(backendImage)'
            # Verification Step
    # - task: Bash@3
    #   displayName: 'Verify Backend'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       echo "Checking backend status..."
    #       kubectl get pods -l app=ssgenerals-backend -o wide
    #       kubectl logs -l app=ssgenerals-backend --tail=50
    #       echo "Proceeding with deployment..."
    # - task: KubernetesManifest@1
    #   displayName: 'Deploy frontend'
    #   inputs:
    #     action: 'deploy'
    #     connectionType: 'kubernetesServiceConnection'
    #     kubernetesServiceConnection: 'azure-kubernetes-ssgenerals-connenction'
    #     namespace: '$(k8sNamespace)'
    #     manifests: '$(System.ArtifactsDirectory)/manifests/frontend-*.yaml'
    #     containers: '$(frontendImage)'
    #     arguments: '--timeout=300s'

    # Get Frontend Service URL
    - task: Bash@3
      displayName: 'Get Frontend URL'
      inputs:
        targetType: 'inline'
        script: |
          kubectl get svc frontend -n $(k8sNamespace) -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
          echo "##vso[task.setvariable variable=frontendUrl]http://$(kubectl get svc frontend -n $(k8sNamespace) -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
    
          # Output the Frontend URL
          - script: echo "Frontend is available at: $(frontendUrl)"
            displayName: 'Display Frontend URL'


# Stage 2
# Build docker image 
# Deploy to K8S Cluster with Docker Image



