# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  TF_WORKING_DIR: '$(System.DefaultWorkingDirectory)/configuration/iaac/kubernetes'
  CLEAN_KEY_PATH: '$(Pipeline.Workspace)/sshkeys/cleaned_key.pub' 

stages:
  - stage: Setup
    jobs:
    - job: AzureSetup
      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: 'azure-resource-manager-service-connection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # # Single-line command that works with Azure CLI 2.70.0
              # az storage blob delete \
              #   --container-name storageaccpractisecontainer \
              #   --name kubernetes-dev.tfstate \
              #   --account-name storageaccjimsonxyz \
              #   --auth-mode key \
              #   --account-key $(az storage account keys list \
              #     --resource-group terraform-backend-rg \
              #     --account-name storageaccjimsonxyz \
              #     --query '[0].value' -o tsv)
              
              # # Verification
              # echo "Remaining blobs:"
              # az storage blob list \
              #   --container-name storageaccpractisecontainer \
              #   --account-name storageaccjimsonxyz \
              #   --output table

          #     echo "Checking if resource grpup exists..."
          #     if ! az group show --name terraform-backend-rg --output none; then
          #       echo "Resource group not found. Creating..."
          #       az group create --name terraform-backend-rg --location westeurope
          #     else
          #       echo "Resource group exists"
          #     fi
          #     echo "Checking if storage account exists"
          #     if ! az storage account show --name storageaccjimsonxyz --resource-group terraform-backend-rg --output none; then
          #       echo "Storage account not forun. Creating..."
          #       az storage account create \
          #         --name storageaccjimsonxyz \
          #         --resource-group terraform-backend-rg \
          #         --sku Standard_RAGRS \
          #         --kind StorageV2 \
          #         --encryption-service blob \
          #         --https-only true \
          #         --allow-blob-public-access false \
          #         --min-tls-version TLS1_2
          #     else
          #       echo "Storage account exists."
          #     fi
          #     echo "Create storage container if it doesnot exist..."
          #     az storage container create \
          #       --name storageaccpractisecontainer\
          #       --account-name storageaccjimsonxyz \
          #       --auth-mode login
          # displayName: 'Create Azure Resources'


  - stage: Terraform
    jobs:
    - job: TerraformJob
      steps:
          - task: DownloadSecureFile@1
            name: publickey
            inputs:
              secureFile: 'azure_rsa.pub'
              retryCount: '5'
          - bash: |
              mkdir -p $(Pipeline.Workspace)/sshkeys

              PUBLIC_KEY_CONTENT=$(cat $(publickey.secureFIlePath) | tr -d '\r\n' | awk '{$1=$1};1')
              
              if [[ ! "$PUBLIC_KEY_CONTENT" =~ ^ssh-rsa\ [A-Za-z0-9+/]+ ]]; then
                echo "##vso[task.logissue type=error]Invalid SSH key format" 
                exit 1
              fi

              echo "$PUBLIC_KEY_CONTENT" > $(CLEAN_KEY_PATH)

              # Set variable for Terraform
              echo "##vso[task.setvariable variable=SSH_PUBLIC_KEY]$PUBLIC_KEY_CONTENT"
              echo "Key file created at: $(CLEAN_KEY_PATH)"
              ls -la $(CLEAN_KEY_PATH)
              ls 
            displayName: 'Prepare SSH Key'
          


          - task: TerraformCLI@2
            inputs:
              command: 'init'
              workingDirectory: '$(TF_WORKING_DIR)'
              backendType: 'azurerm'
              backendServiceArm: 'azure-resource-manager-service-connection'
              # commandOptions: '-var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(CLEAN_KEY_PATH)" -var="resource_group=kubepractise" -var="node_count=2" '
              backendAzureRmResourceGroupName: 'terraform-backend-rg'
              backendAzureRmStorageAccountName: 'storageaccjimsonxyz'
              backendAzureRmContainerName: 'storageaccpractisecontainer'
              backendAzureRmKey: 'kubernetes-dev.tfstate'

              allowTelemetryCollection: true
          
          # - bash: |
          #     echo "Attempting to force-unlock Terraform state..."
          #     echo "yes" | terraform -chdir=$(TF_WORKING_DIR) force-unlock 073ef029-24c2-dd0b-ed84-213f79d1eb4c

          #     terraform -chdir=$(TF_WORKING_DIR) init -reconfigure
          #   continueOnError: true
          #   displayName: 'Cleanup Previous Lock'
          #   env:
          #     TF_INPUT: 0

          - task: TerraformCLI@2
            displayName: 'Import AKS Cluster (Correct Format)'
            inputs:
              command: 'import'
              workingDirectory: '$(TF_WORKING_DIR)'
              environmentServiceName: 'azure-resource-manager-service-connection'
              resourceAddress: 'azurerm_kubernetes_cluster.terraform-k8s'
             
              resourceId: '/subscriptions/fbccdf0c-3db4-454b-a6f3-0713e306b7f5/resourceGroups/kubepractise_dev/providers/Microsoft.ContainerService/managedClusters/prodtest_dev'
              commandOptions: '-var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(SSH_PUBLIC_KEY)"'

          # Add this step AFTER 'init' but BEFORE 'apply'
          - task: TerraformCLI@2
            displayName: 'Import Existing AKS Cluster'
            inputs:
              command: 'import'
              workingDirectory: '$(TF_WORKING_DIR)'
              environmentServiceName: 'azure-resource-manager-service-connection'
              resourceAddress: 'azurerm_kubernetes_cluster.terraform-k8s'
              resourceId: '/subscriptions/fbccdf0c-3db4-454b-a6f3-0713e306b7f5/resourceGroups/kubepractise_dev'
              commandOptions: '-var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(SSH_PUBLIC_KEY)"'

          - task: TerraformCLI@2
            inputs:
              command: 'apply'
              workingDirectory: '$(TF_WORKING_DIR)'
              environmentServiceName: 'azure-resource-manager-service-connection'
              commandOptions: '-auto-approve -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(CLEAN_KEY_PATH)" -var="resource_group=kubepractise" -var="node_count=2" '

          
          - task: TerraformCLI@2
            inputs:
              command: 'destroy'
              workingDirectory: '$(TF_WORKING_DIR)'
              environmentServiceName: 'azure-resource-manager-service-connection'
              commandOptions: '-auto-approve -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(CLEAN_KEY_PATH)" -var="node_count=2"'
