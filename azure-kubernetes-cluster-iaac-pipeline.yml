trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  TF_WORKING_DIR: '$(System.DefaultWorkingDirectory)/configuration/iaac/kubernetes'
  CLEAN_KEY_PATH: '$(Pipeline.Workspace)/sshkeys/cleaned_key.pub'

stages:
  - stage: Setup
    jobs:
    - job: AzureSetup
      steps:
        - task: AzureCLI@2
          displayName: 'Cleanup Previous State'
          inputs:
            azureSubscription: 'azure-resource-manager-service-connection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Attempt to break lease if exists, ignore if doesn't
              set +e
              az storage blob lease break \
                --container-name storageaccpractisecontainer \
                --blob-name kubernetes-dev.tfstate \
                --account-name storageaccjimsonxyz \
                --auth-mode key \
                --account-key $(az storage account keys list \
                  --resource-group terraform-backend-rg \
                  --account-name storageaccjimsonxyz \
                  --query '[0].value' -o tsv) \
                || echo "No lease to break"
              set -e

  - stage: Terraform
    jobs:
    - job: TerraformJob
      steps:
        - task: DownloadSecureFile@1
          name: publickey
          inputs:
            secureFile: 'azure_rsa.pub'
            retryCount: '5'
        
        - bash: |
            mkdir -p $(Pipeline.Workspace)/sshkeys
            PUBLIC_KEY_CONTENT=$(cat $(publickey.secureFilePath) | tr -d '\r\n' | awk '{$1=$1};1')
            
            if [[ ! "$PUBLIC_KEY_CONTENT" =~ ^ssh-rsa\ [A-Za-z0-9+/]+ ]]; then
              echo "##vso[task.logissue type=error]Invalid SSH key format" 
              exit 1
            fi

            echo "$PUBLIC_KEY_CONTENT" > $(CLEAN_KEY_PATH)
            echo "##vso[task.setvariable variable=SSH_PUBLIC_KEY]$(cat $(CLEAN_KEY_PATH))"
          displayName: 'Prepare SSH Key'

        - task: TerraformCLI@2
          displayName: 'Terraform Init'
          inputs:
            command: 'init'
            workingDirectory: '$(TF_WORKING_DIR)'
            backendType: 'azurerm'
            backendServiceArm: 'azure-resource-manager-service-connection'
            backendAzureRmResourceGroupName: 'terraform-backend-rg'
            backendAzureRmStorageAccountName: 'storageaccjimsonxyz'
            backendAzureRmContainerName: 'storageaccpractisecontainer'
            backendAzureRmKey: 'kubernetes-dev.tfstate'
          env:
            ARM_ACCESS_KEY: $(az storage account keys list \
              --resource-group terraform-backend-rg \
              --account-name storageaccjimsonxyz \
              --query '[0].value' -o tsv)

        - script: |
            # Remove existing AKS cluster from state if present
            terraform state rm azurerm_kubernetes_cluster.terraform-k8s 2> /dev/null || true
          displayName: 'Clean State'
          workingDirectory: '$(TF_WORKING_DIR)'

        - task: TerraformCLI@2
          displayName: 'Import AKS Cluster'
          inputs:
            command: 'import'
            workingDirectory: '$(TF_WORKING_DIR)'
            resourceAddress: 'azurerm_kubernetes_cluster.terraform-k8s'
            resourceId: '/subscriptions/fbccdf0c-3db4-454b-a6f3-0713e306b7f5/resourceGroups/kubepractise_dev/providers/Microsoft.ContainerService/managedClusters/prodtest_dev'
          env:
            ARM_CLIENT_ID: $(client_id)
            ARM_CLIENT_SECRET: $(client_secret)
            ARM_TENANT_ID: 4d143b55-605d-4af2-a581-12ee448bba20
            ARM_SUBSCRIPTION_ID: fbccdf0c-3db4-454b-a6f3-0713e306b7f5

        - task: TerraformCLI@2
          displayName: 'Terraform Apply'
          inputs:
            command: 'apply'
            workingDirectory: '$(TF_WORKING_DIR)'
            commandOptions: '-auto-approve -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(SSH_PUBLIC_KEY)" -var="node_count=2"'
          env:
            ARM_CLIENT_ID: $(client_id)
            ARM_CLIENT_SECRET: $(client_secret)
            ARM_TENANT_ID: 4d143b55-605d-4af2-a581-12ee448bba20
            ARM_SUBSCRIPTION_ID: fbccdf0c-3db4-454b-a6f3-0713e306b7f5
